#!/usr/bin/env perl
use Test::More;
use AutoHarp::Constants;
use AutoHarp::Fuzzy;
use_ok AutoHarp::Instrument;
use_ok AutoHarp::MusicBox::Song::Segment;
use_ok AutoHarp::MusicBox::Base;
use_ok AutoHarp::Clock;
use_ok AutoHarp::Genre;

use JSON;
use strict;
use MIDI;

my $testCount = 5;
my $loop      = AutoHarp::Instrument->new($ATTR_INSTRUMENT_CLASS => $DRUM_LOOP);


for (1..4) {
  $loop->reset();
  #tell the loop it's playing so it's not tempted to give us a lead-in
  #if indeed it ever does that
  $loop->isPlaying(1);
  my $measures  = int(rand(8)) + 1;
  my $genreName = pickOne(AutoHarp::Genre::Genres());
  my $genre     = AutoHarp::Genre->new($genreName);
  my $clock     = $genre->suggestClock();
  my $swing     = plusMinus() * (int(rand(10)) + 10);
  $clock->swingPct($swing);
  my $guide = AutoHarp::Events::Guide->fromAttributes(
						      $ATTR_CLOCK => $clock,
						      $ATTR_BARS => $measures
						     );
  my $time = int(rand(10) + 1) * $clock->measureTime();
  my $music   = AutoHarp::MusicBox::Base->new($ATTR_GUIDE => $guide);
  my $segment = AutoHarp::MusicBox::Song::Segment->new();
  $music->genre($genre);
  $music->tag($SONG_ELEMENT_VERSE);
  $segment->music($music);
  $segment->time($time);
  $segment->transitionOut('up');
  my $notes = $loop->play($segment);
  is($segment->duration(), $measures * $clock->measureTime(), "Segment is valid in its, like, length");
  if (ok($segment->genre(),"Segment genre is not null")) {
    is($segment->genre()->name, $genreName, "Segment has the correct genre, $genreName");
    $testCount++;
  }
  my $timeok = cmp_ok($notes->time(), ">=", $segment->time(), "Drums don't come in too early");
  $timeok &= cmp_ok($notes->reach(), "<=", $segment->reach(), "Drums don't exit too late");
  $timeok &= cmp_ok($notes->duration(), ">", $segment->duration() - $clock->measureTime(), "Drums actually, like, exist, or whatever");
  $testCount += 5;
  $clock->addSwing($notes);
  my $newClock = AutoHarp::Clock->new($ATTR_METER => $clock->meter());
  my $detected = $newClock->detectSwing($notes);
}

my $thirtyTwoTest = AutoHarp::Events::Melody->new();
my $clock = AutoHarp::Clock->new();
my $swing = plusMinus() * (int(rand(10)) + 10);
my $swingNote = 'eighth'; #pickOne('eighth','sixteenth');
$clock->swingNote($swingNote);
$clock->swingPct($swing);

$thirtyTwoTest->time(0);
my $n = AutoHarp::Event::Note->new(48,$DRUM_RESOLUTION,mediumVelocity(),0);
foreach my $m (0) {
  foreach my $b (0..31) {
    my $c = $n->clone();
    $c->time(($m * $clock->measureTime) + ($b * $DRUM_RESOLUTION));
    $thirtyTwoTest->add($c);
  }
}
#$thirtyTwoTest->time(int(rand(10) + 1) * $clock->measureTime());
$clock->addSwing($thirtyTwoTest);
done_testing($testCount);
exit(0);
