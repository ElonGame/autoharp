#!/usr/bin/env perl
use FindBin qw($Bin);
use lib "$Bin/../lib";

use AutoHarp::Transcription;
use AutoHarp::Model::Genre;
use AutoHarp::Clock;
use strict;


my $file = shift(@ARGV);
if (!$file) {
  die "usage: regenerate <json file>\n";
}
my $gName = join(" ",@ARGV);
my $genre;
if ($gName) {
  $genre = AutoHarp::Model::Genre->loadByName($gName);
  if ($genre->isEmpty()) {
    print "Genre $gName is unknown. Valid Genres:\n";
    print join("\n",map {$_->name} @{AutoHarp::Model::Genre->all()});
    print "\n";
    exit(0);
  }
}

my $transcription = AutoHarp::Transcription->regenerate($file,$genre);
if (!$ENV{AUTOHARP_QUIET}) {
  print "export AUTOHARP_QUIET=fuckyes to be less verbose next time\n";
}
my $midiOut = $transcription->MIDIOut();
my $jsonOut = $transcription->JSONOut();
my $sName   = $transcription->name();
print "Writing transcription...\n";
$transcription->write();
print "Done\n";
printf "MIDI file is %s\n",$transcription->MIDIOut();
printf "JSON file is %s\n",$transcription->JSONOut();
printf "Quickfile is %s\n",$transcription->QuickOut();

if (!AutoHarp::Config::Play($transcription->song)) {
  print "Set env var MIDI_PLAYER to a valid command-line midi player to play midi file\n";
}

print "Rename this session,\n";
print "'x' to wipe it off the face of the earth,\n";
print "($ARGV[0] will remain unmolested in all cases)\n";
print "enter to accept '$sName'==> ";
chomp(my $nName = <STDIN>);
if (lc($nName) eq 'x') {
  $transcription->nuke();
  print "$sName is no more. Its art has been deemed unworthy\n";
} elsif ($nName) {
  $transcription->name($nName);
  printf "Session MIDI moved to %s\n",$transcription->MIDIOut();
  printf "Session JSON moved to %s\n",$transcription->JSONOut();
  printf "Quickfile moved to %s\n",$transcription->QuickOut();
  $transcription->like();
}
exit(0);

