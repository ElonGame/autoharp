#!/usr/bin/env perl
use FindBin qw($Bin);
use lib "$Bin/../lib";

use AutoHarp::Generator;
use AutoHarp::Events::Guide;
use AutoHarp::Transcription;
use AutoHarp::Instrument;
use AutoHarp::Constants;
use AutoHarp::Conductor;
use AutoHarp::Composer;
use AutoHarp::Model::Genre;
use AutoHarp::Clock;
use AutoHarp::Scale;
use AutoHarp::Fuzzy;
use AutoHarp::Config;

use strict;

my $genreName = join(" ",@ARGV);
my $genre;
my $all = AutoHarp::Model::Genre->all();
if ($genreName) {
  $genre = AutoHarp::Model::Genre->loadByName($genreName);
  if ($genre->isEmpty()) {
    print "Genre $genreName is unknown. Valid Genres:\n";
    print join("\n",map {$_->name} @{AutoHarp::Model::Genre->all()});
    print "\n";
    exit(0);
  }
} else {
  $genreName = $ATTR_MACHINE_GENRE;
}

my $band  = AutoHarp::Instrument->band();
my $clock = chooseClock($genre);
my $scale = chooseScale();
my $bars  = 8;
my $guide = AutoHarp::Events::Guide->fromAttributes($ATTR_BARS => $bars,
						    $ATTR_CLOCK => $clock,
						    $ATTR_SCALE => $scale);
my $generator = AutoHarp::Generator->new();
my $composer  = AutoHarp::Composer->new();
my $conductor = AutoHarp::Conductor->new();

my $music = [];
print "Generating verse\n";
my $verse  = $generator->generateMusic($guide);
print "Generating chorus\n";
my $chorus = $generator->generateMusic($guide,(asOftenAsNot) ? $verse : undef);
print "Generating bridge\n";
my $bridge = $generator->generateMusic($guide,(asOftenAsNot) ? $verse : $chorus);
print "Generating hook\n";
my $hook   = $generator->generateHook((asOftenAsNot) ? $verse : $chorus);

$verse->tag($SONG_ELEMENT_VERSE);
$chorus->tag($SONG_ELEMENT_CHORUS);
$bridge->tag($SONG_ELEMENT_BRIDGE);

$verse->genre($genre);
$chorus->genre($genre);
$bridge->genre($genre);

$composer->addMusic($verse);
$composer->addMusic($chorus);
$composer->addMusic($bridge);
print "Composing...\n";
$composer->compose();
print "Conducting...\n";
my $song = $conductor->conduct({$ATTR_COMPOSITION => $composer->composition(),
				$ATTR_MUSIC => {$SONG_ELEMENT_VERSE => $verse, 
						$SONG_ELEMENT_CHORUS => $chorus, 
						$SONG_ELEMENT_BRIDGE => $bridge},
				$ATTR_INSTRUMENTS => $band,
				$ATTR_HOOK => $hook
			       });
my $transcription = AutoHarp::Transcription->new();
my $sessName      = "$genreName-" . time();
$transcription->name($sessName);
$transcription->verse($verse);
$transcription->chorus($chorus);
$transcription->bridge($bridge);
$transcription->song($song);
$transcription->hook($hook);
$transcription->instruments($band);
print "Writing transcription...\n";
$transcription->write();
print "Done.\n";
if (!$ENV{AUTOHARP_QUIET}) {
  print "export AUTOHARP_QUIET=1 to be less verbose next time\n";
}
print "Genre is $genreName\n";
print "Song Settings: ";
print AutoHarp::Notation::CreateHeader($ATTR_CLOCK => $clock,
				       $ATTR_SCALE => $scale);
print "\n";
printf "MIDI file is %s\n",$transcription->MIDIOut();
printf "JSON file is %s\n",$transcription->JSONOut();

if (!AutoHarp::Config::Play($song)) {
  print "Set env var MIDI_PLAYER to a valid command-line midi player to play midi file\n";
}
print "Rename this session,\n";
print "'x' to annhiliate it entirely,\n";
print "enter to accept '$sessName' ==> "; 
chomp(my $sName = <STDIN>);
if (lc($sName) eq 'x') {
  $transcription->nuke();
  print "Goodbye $sessName. You have been deemed unworthy\n";
} elsif ($sName) {
  $transcription->name($sName);
  printf "Session MIDI moved to %s\n",$transcription->MIDIOut();
  printf "Session JSON moved to %s\n",$transcription->JSONOut();
  $transcription->like();
}
exit(0);

sub chooseClock {
  my $genre = shift;
  if ($genre) {
    return $genre->suggestClock();
  }
  my $loop = pickOne(AutoHarp::Model::Loop->all({type => $DRUM_LOOP}));
  return AutoHarp::Clock->new($ATTR_METER => $loop->meter,
			      $ATTR_TEMPO => $loop->tempo);
}

sub chooseScale {
  my $seed = int(rand() * 100);
  my $pct = 100;
  #key frequency taken from hooktheory.com
  my @wheel = map {{pct => $_->[0], key => $_->[1]}} ([26, 'C'],
						      [12, 'G'],
						      [10, 'E flat'],
						      [9, 'F'],
						      [8, 'D'],
						      [8, 'A'],
						      [7, 'E'], 
						      [7, 'D flat'],
						      [5, 'B flat'],
						      [4, 'A flat'],
						      [2, 'B'],
						      [2, 'F sharp']);
  my $key;
  foreach my $w (reverse @wheel) {
    $pct -= $w->{pct};
    if ($seed >= $pct) {
      $key = $w->{key};
      last;
    }
  }
  $key ||= $wheel[0]->{key};
  my $scale = AutoHarp::Scale->new($key);
  if (sometimes) {
    #go minor
    $scale->toRelativeMinor();
  }
  return $scale;
}
